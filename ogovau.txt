INSERT INTO "SuperHeroes" ("Id", "Name", "FirstName", "LastName", "City") VALUES (5, 'Iron Man', 'Tony', 'Stark', 'New York')



INSERT INTO "SuperHeroes" ("Name", "FirstName", "LastName", "Place") VALUES ('Iron Man', 'Tony', 'Stark', 'New York');



"INSERT INTO \"SuperHeroes\" (\"Name\", \"FirstName\", \"LastName\", \"Place\") VALUES ('Iron Man', 'Tony', 'Stark', 'New York');"


UPDATE \"SuperHeroes\" SET \"Name\" = 'Iron Man', \"FirstName\" = 'Tony', \"LastName\" = 'Stark', \"Place\" = 'New New York' WHERE \"ID\" = 5;



CREATE OR REPLACE FUNCTION create_role_from_roles_table()
RETURNS TRIGGER AS
$BODY$
BEGIN
    -- Check if the RoleName is not null
    IF NEW."RoleName" IS NOT NULL THEN
        -- Create the role with the provided name
        EXECUTE format('CREATE ROLE %I', NEW."RoleName");
    END IF;
    RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;




CREATE TRIGGER roles_after_insert
AFTER INSERT ON "Roles"
FOR EACH ROW
EXECUTE FUNCTION create_role_from_roles_table();

INSERT INTO "Roles" ("RoleName") VALUES ('MegaTest');

CREATE OR REPLACE FUNCTION update_role_from_roles_table()
RETURNS TRIGGER AS
$BODY$
BEGIN
    -- Check if the role_name has been modified
    IF OLD."RoleName" <> NEW."RoleName" THEN
        -- Check if the old role exists
        PERFORM 1 FROM pg_roles WHERE rolname = OLD."RoleName";
        IF FOUND THEN
            -- Rename the old role to the new role
            EXECUTE format('ALTER ROLE %I RENAME TO %I', OLD."RoleName", NEW."RoleName");
        END IF;
    END IF;
    RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;


CREATE TRIGGER roles_after_update
AFTER UPDATE ON "Roles"
FOR EACH ROW
EXECUTE FUNCTION update_role_from_roles_table();


CREATE OR REPLACE FUNCTION delete_role_from_roles_table()
RETURNS TRIGGER AS
$BODY$
BEGIN
    -- Drop the role if it exists
    EXECUTE format('DROP ROLE IF EXISTS %I', OLD."RoleName");
    RETURN OLD;
END;
$BODY$
LANGUAGE plpgsql;


CREATE TRIGGER roles_after_delete
AFTER DELETE ON "Roles"
FOR EACH ROW
EXECUTE FUNCTION delete_role_from_roles_table();


CREATE OR REPLACE FUNCTION add_permission_to_role()
RETURNS TRIGGER AS
$BODY$
DECLARE
    role_name TEXT;
BEGIN
    -- Fetch the role name from the Roles table based on RoleId
    SELECT "RoleName" INTO role_name FROM "Roles" WHERE "RoleId" = NEW."RoleId";

    IF NEW."Operation" = 0 THEN
        -- Grant INSERT privilege on the specified table to the role
        EXECUTE format('GRANT INSERT ON TABLE %I TO %I', NEW."TableName", role_name);
    ELSIF NEW."Operation" = 1 THEN
        -- Grant SELECT privilege on the specified table to the role
        EXECUTE format('GRANT SELECT ON TABLE %I TO %I', NEW."TableName", role_name);
    ELSIF NEW."Operation" = 2 THEN
        -- Grant UPDATE privilege on the specified table to the role
        EXECUTE format('GRANT UPDATE ON TABLE %I TO %I', NEW."TableName", role_name);
    ELSIF NEW."Operation" = 3 THEN
        -- Grant DELETE privilege on the specified table to the role
        EXECUTE format('GRANT DELETE ON TABLE %I TO %I', NEW."TableName", role_name);
    END IF;

    RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER add_permission_trigger
AFTER INSERT ON "Permissions"
FOR EACH ROW
EXECUTE FUNCTION add_permission_to_role();



CREATE OR REPLACE FUNCTION update_role_permissions()
RETURNS TRIGGER AS
$BODY$
DECLARE
    role_name TEXT;
BEGIN
    -- Fetch the role name from the Roles table based on RoleId
    SELECT "RoleName" INTO role_name FROM "Roles" WHERE "RoleId" = NEW."RoleId";

    IF OLD."Operation" <> NEW."Operation" OR OLD."TableName" <> NEW."TableName" THEN
        -- Revoke the old permissions from the role
        IF OLD."Operation" = 0 THEN
            EXECUTE format('REVOKE INSERT ON TABLE %I FROM %I', OLD."TableName", role_name);
        ELSIF OLD."Operation" = 1 THEN
            EXECUTE format('REVOKE SELECT ON TABLE %I FROM %I', OLD."TableName", role_name);
        ELSIF OLD."Operation" = 2 THEN
            EXECUTE format('REVOKE UPDATE ON TABLE %I FROM %I', OLD."TableName", role_name);
        ELSIF OLD."Operation" = 3 THEN
            EXECUTE format('REVOKE DELETE ON TABLE %I FROM %I', OLD."TableName", role_name);
        END IF;

        -- Grant the updated permissions to the role
        IF NEW."Operation" = 0 THEN
            EXECUTE format('GRANT INSERT ON TABLE %I TO %I', NEW."TableName", role_name);
        ELSIF NEW."Operation" = 1 THEN
            EXECUTE format('GRANT SELECT ON TABLE %I TO %I', NEW."TableName", role_name);
        ELSIF NEW."Operation" = 2 THEN
            EXECUTE format('GRANT UPDATE ON TABLE %I TO %I', NEW."TableName", role_name);
        ELSIF NEW."Operation" = 3 THEN
            EXECUTE format('GRANT DELETE ON TABLE %I TO %I', NEW."TableName", role_name);
        END IF;
    END IF;

    RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;


CREATE TRIGGER update_permissions_trigger
AFTER UPDATE ON "Permissions"
FOR EACH ROW
EXECUTE FUNCTION update_role_permissions();


CREATE OR REPLACE FUNCTION delete_permission_from_role()
RETURNS TRIGGER AS
$BODY$
DECLARE
    role_name TEXT;
BEGIN
    -- Fetch the role name from the Roles table based on RoleId
    SELECT "RoleName" INTO role_name FROM "Roles" WHERE "RoleId" = OLD."RoleId";

    -- Revoke the permissions from the role for the deleted row
    IF OLD."Operation" = 0 THEN
        EXECUTE format('REVOKE INSERT ON TABLE %I FROM %I', OLD."TableName", role_name);
    ELSIF OLD."Operation" = 1 THEN
        EXECUTE format('REVOKE SELECT ON TABLE %I FROM %I', OLD."TableName", role_name);
    ELSIF OLD."Operation" = 2 THEN
        EXECUTE format('REVOKE UPDATE ON TABLE %I FROM %I', OLD."TableName", role_name);
    ELSIF OLD."Operation" = 3 THEN
        EXECUTE format('REVOKE DELETE ON TABLE %I FROM %I', OLD."TableName", role_name);
    END IF;

    RETURN OLD;
END;
$BODY$
LANGUAGE plpgsql;


CREATE TRIGGER delete_permission_trigger
AFTER DELETE ON "Permissions"
FOR EACH ROW
EXECUTE FUNCTION delete_permission_from_role();


CREATE TABLE "students" (
    "student_id" serial PRIMARY KEY,
    "first_name" varchar(255),
    "last_name" varchar(255),
    "patronymic" varchar(255),
    "gender" varchar(10),
    "date_of_birth" date,
    "passport_series_and_number" varchar(20),
    "INN" varchar(20),
    "SNILS" varchar(20),
    "place_of_birth" varchar(255),
    "email" varchar(255),
    "student_login" varchar(100),
    "enrollment_order" varchar(100),
    "enrolled_date" date,
    "course" integer,
    "course_work_id" integer,
    "group_id" integer,
    "subgroup" integer
);

CREATE TABLE "groups" (
    "group_id" SERIAL PRIMARY KEY,
    "group_dir_id" INTEGER,
    "group_prof_id" INTEGER,
    "group_number" VARCHAR(50)
);

CREATE TABLE "directions" (
    "dir_id" SERIAL PRIMARY KEY,
    "dir_name" VARCHAR(100),
    "dir_code" VARCHAR(20)
);

CREATE TABLE "profiles"(
    "prof_id" SERIAL PRIMARY KEY,
    "prof_dir_id" INTEGER,
    "prof_name" VARCHAR(100)
);

CREATE TABLE "course_work" (
    "course_work_id" SERIAL PRIMARY KEY,
    "course_work_teacher_id" INTEGER,
    "course_work_theme" VARCHAR(200),
    "course_work_student_id" INTEGER,
    "course_work_kafedra" VARCHAR(100)
);

INSERT INTO "students" (
    "first_name",
    "last_name",
    "patronymic",
    "gender",
    "date_of_birth",
    "passport_series_and_number",
    "INN",
    "SNILS",
    "place_of_birth",
    "email",
    "student_login",
    "enrollment_order",
    "enrolled_date",
    "course",
    "course_work_id",
    "group_id",
    "subgroup"
) VALUES (
    'Николай',
    'Дроздов',
    'Витальевич',
    'М',
    '2003-04-25',
    'AB123456',
    '1234567890',
    '9876543210',
    'Краснодар',
    'nikolaidrozdov123@gmail.com',
    's0169549',
    '2023/001',
    '2023-08-24',
    3,
    1,
    1,
    1
);


INSERT INTO "groups" (
    "group_dir_id",
    "group_prof_id",
    "group_number"
) VALUES (
    '1',
    '1',
    '25'
);

INSERT INTO "directions" (
    "dir_name",
    "dir_code"
) VALUES (
    'Математическое обеспечение и администрирование информационных систем',
    '02.03.03'
);

INSERT INTO "profiles" (
    "prof_dir_id",
    "prof_name"
) VALUES (
    '1',
    'Технология программирования'
);


SELECT 
    s.student_id,
    CONCAT_WS(' ', s.last_name, s.first_name, s.patronymic) AS full_name,
    CONCAT(g.group_number, '/', s.subgroup) AS group_name,
    TO_CHAR(s.enrolled_date, 'DD/MM/YYYY') AS formatted_enrolled_date,
    s.enrollment_order,
    TO_CHAR(s.date_of_birth, 'DD/MM/YYYY') AS formatted_date_of_birth
FROM 
    students s
JOIN 
    groups g ON s.group_id = g.group_id
ORDER BY 
    s.student_id ASC;

SELECT grantee, privilege_type 
FROM information_schema.role_table_grants 
WHERE table_name='SuperHeroes';

SELECT p.*, r."RoleName"
FROM "Permissions" AS p
INNER JOIN "Roles" AS r ON p."RoleId" = r."RoleId"
WHERE p."TableName" = 'students';

INSERT INTO "Permissions" (
    "RoleId",
    "TableName",
    "Operation"
) VALUES (
    '2',
    'students',
    '1'
);


CREATE TABLE programs (
    id serial PRIMARY KEY,
    required_amount DECIMAL(10, 2) NOT NULL,
    program_name VARCHAR(255) NOT NULL,
    hours INTEGER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
);


CREATE TABLE pay_graph(
    id serial PRIMARY KEY,
    listener_id INT,
    contract_id INT,
    payer_id INT,
    expiration_date DATE,
    deposited_amount DECIMAL(10, 2) DEFAULT 0.00
);

CREATE TABLE listeners(
    id serial PRIMARY KEY,
    days_of_week varchar(3)[],
    people_count INT,
    payer_id INT,
    name VARCHAR(255),
    surname VARCHAR(255),
    lastname VARCHAR(255),
    snils VARCHAR(30),
    passport VARCHAR(20),
    issued_by VARCHAR(255),
    issue_date DATE,
    department_code VARCHAR(10),
    registration_address TEXT,
    phone_number VARCHAR(15),
    email VARCHAR(255)
);

CREATE TABLE payers(
    id serial PRIMARY KEY,
    name VARCHAR(255),
    surname VARCHAR(255),
    lastname VARCHAR(255),
    snils VARCHAR(30),
    passport VARCHAR(20),
    issued_by VARCHAR(255),
    issue_date DATE,
    department_code VARCHAR(10),
    registration_address TEXT,
    phone_number VARCHAR(15),
    email VARCHAR(255)
);



CREATE TABLE contracts(
    id SERIAL PRIMARY KEY,
    listener_id INT,
    payer_id INT,
    contr_number INT,
    program_id INT
);


INSERT INTO pay_graph (listener_id, contract_id, expiration_date, deposited_amount)
VALUES 
    (1, 1, '2024-01-15', 300.75),
    (2, 2, '2023-11-30', 750.25),
    (3, 3, '2024-02-28', 900.00);

INSERT INTO contracts (listener_id, contr_number, payer_id, program_id)
VALUES (1, 12345, 2, 3);

INSERT INTO contracts (listener_id, payer_id, contr_number, program_id)
VALUES
    (1, 1, 1001, 1);


CREATE TABLE audit_table (LIKE users INCLUDING ALL);
ALTER TABLE audit_table
ADD COLUMN operation CHAR(1),
ADD COLUMN timestamp TIMESTAMPTZ DEFAULT current_timestamp;

CREATE TABLE audit_table_students (
    audit_id SERIAL PRIMARY KEY,
    student_id INT,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    patronymic VARCHAR(255),
    gender CHAR(1),
    date_of_birth DATE,
    passport_series_and_number VARCHAR(20),
    "INN" VARCHAR(20),
    "SNILS" VARCHAR(20),
    place_of_birth VARCHAR(255),
    email VARCHAR(255),
    student_login VARCHAR(255),
    enrollment_order VARCHAR(50),
    enrolled_date DATE,
    course INT,
    course_work_id INT,
    group_id INT,
    operation CHAR(1),
    timestamp TIMESTAMPTZ DEFAULT current_timestamp
);


CREATE OR REPLACE FUNCTION students_audit_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Insert operation for insert
        INSERT INTO audit_table_students (
            student_id,
            first_name,
            last_name,
            patronymic,
            gender,
            date_of_birth,
            passport_series_and_number,
            inn,
            snils,
            place_of_birth,
            email,
            student_login,
            enrollment_order,
            enrolled_date,
            course,
            course_work_id,
            group_id,
            operation
        )
        VALUES (
            NEW.student_id,
            NEW.first_name,
            NEW.last_name,
            NEW.patronymic,
            NEW.gender,
            NEW.date_of_birth,
            NEW.passport_series_and_number,
            NEW."INN",
            NEW."SNILS",
            NEW.place_of_birth,
            NEW.email,
            NEW.student_login,
            NEW.enrollment_order,
            NEW.enrolled_date,
            NEW.course,
            NEW.course_work_id,
            NEW.group_id,
            'I'
        );
    ELSIF TG_OP = 'UPDATE' THEN
        -- Insert operation for update
        INSERT INTO audit_table_students (
            student_id,
            first_name,
            last_name,
            patronymic,
            gender,
            date_of_birth,
            passport_series_and_number,
            inn
            snils,
            place_of_birth,
            email,
            student_login,
            enrollment_order,
            enrolled_date,
            course,
            course_work_id,
            group_id,
            operation
        )
        VALUES (
            OLD.student_id,
            OLD.first_name,
            OLD.last_name,
            OLD.patronymic,
            OLD.gender,
            OLD.date_of_birth,
            OLD.passport_series_and_number,
            OLD."INN",
            OLD."SNILS",
            OLD.place_of_birth,
            OLD.email,
            OLD.student_login,
            OLD.enrollment_order,
            OLD.enrolled_date,
            OLD.course,
            OLD.course_work_id,
            OLD.group_id,
            'U'
        );
    ELSIF TG_OP = 'DELETE' THEN
        -- Insert operation for delete
        INSERT INTO audit_table_students (
            student_id,
            first_name,
            last_name,
            patronymic,
            gender,
            date_of_birth,
            passport_series_and_number,
            INN,
            SNILS,
            place_of_birth,
            email,
            student_login,
            enrollment_order,
            enrolled_date,
            course,
            course_work_id,
            group_id,
            operation
        )
        VALUES (
            OLD.student_id,
            OLD.first_name,
            OLD.last_name,
            OLD.patronymic,
            OLD.gender,
            OLD.date_of_birth,
            OLD.passport_series_and_number,
            OLD."INN",
            OLD."SNILS",
            OLD.place_of_birth,
            OLD.email,
            OLD.student_login,
            OLD.enrollment_order,
            OLD.enrolled_date,
            OLD.course,
            OLD.course_work_id,
            OLD.group_id,
            'D'
        );
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER students_audit
AFTER INSERT OR UPDATE OR DELETE
ON students
FOR EACH ROW
EXECUTE FUNCTION students_audit_trigger();

ALTER TABLE "Users"
ADD CONSTRAINT unique_username UNIQUE ("Username");
